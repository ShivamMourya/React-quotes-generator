{"version":3,"sources":["colorsArray.js","App.js","reportWebVitals.js","index.js"],"names":["colorsArray","App","useState","quote","setQuote","author","setAuthor","setRandomNumber","quotesArray","setQuotesArray","colors","setColors","fetchQuotes","url","a","fetch","response","json","parsedJSON","quotes","useEffect","className","style","backgroundColor","color","id","href","target","rel","icon","faTwitter","onClick","randomInteger","Math","floor","length","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAqDeA,G,MArDG,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,Y,uBCiDaC,MAxFf,WACE,MAA0BC,mBAAS,mBAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,WAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwCJ,mBAAS,GAAjD,mBAAqBK,GAArB,WACA,EAAsCL,mBAAS,MAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAEA,EAA4BP,mBAAS,WAArC,mBAAOQ,EAAP,KAAeC,EAAf,KAEMC,EAAW,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBT,EAAeS,EAAWC,QAHR,2CAAH,sDA2CjB,OArCAC,qBACE,WACER,EAlBJ,6IAsDE,qBAAKS,UAAU,MAAf,SACE,wBACEA,UAAU,aACVC,MAAO,CAAEC,gBAAiBb,EAAQc,MAAOd,GAF3C,SAIE,sBAAKe,GAAG,YAAYH,MAAO,CAAEE,MAAOd,GAApC,UAEE,qBAAIe,GAAG,OAAP,cAAgBtB,EAAhB,OACA,oBAAGsB,GAAG,SAAN,eAAkBpB,KAElB,sBAAKgB,UAAU,SAAf,UACE,mBACEC,MAAO,CAAEC,gBAAiBb,GAC1Be,GAAG,cACHC,KAAI,mDAA8CvB,EAA9C,aAAwDE,GAC5DsB,OAAO,SACPC,IAAI,aALN,SAQE,cAAC,IAAD,CAAiBC,KAAMC,QAGzB,wBACER,MAAO,CAAEC,gBAAiBb,GAC1Be,GAAG,YACHM,QAzDiB,WAC3B,IAAIC,EAAgBC,KAAKC,MAAM1B,EAAY2B,OAASF,KAAKG,UACzD7B,EAAgByB,GAChB5B,EAASI,EAAYwB,GAAe7B,OACpCG,EAAUE,EAAYwB,GAAe3B,QAErCM,EAAUX,EAAYgC,KAgDd,oCCzEGK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.30ad6874.chunk.js","sourcesContent":["let colorsArray = [\r\n  \"#FF6633\",\r\n  \"#FFB399\",\r\n  \"#FF33FF\",\r\n  \"#FFFF99\",\r\n  \"#00B3E6\",\r\n  \"#E6B333\",\r\n  \"#3366E6\",\r\n  \"#999966\",\r\n  \"#99FF99\",\r\n  \"#B34D4D\",\r\n  \"#80B300\",\r\n  \"#809900\",\r\n  \"#E6B3B3\",\r\n  \"#6680B3\",\r\n  \"#66991A\",\r\n  \"#FF99E6\",\r\n  \"#CCFF1A\",\r\n  \"#FF1A66\",\r\n  \"#E6331A\",\r\n  \"#33FFCC\",\r\n  \"#66994D\",\r\n  \"#B366CC\",\r\n  \"#4D8000\",\r\n  \"#B33300\",\r\n  \"#CC80CC\",\r\n  \"#66664D\",\r\n  \"#991AFF\",\r\n  \"#E666FF\",\r\n  \"#4DB3FF\",\r\n  \"#1AB399\",\r\n  \"#E666B3\",\r\n  \"#33991A\",\r\n  \"#CC9999\",\r\n  \"#B3B31A\",\r\n  \"#00E680\",\r\n  \"#4D8066\",\r\n  \"#809980\",\r\n  \"#E6FF80\",\r\n  \"#1AFF33\",\r\n  \"#999933\",\r\n  \"#FF3380\",\r\n  \"#CCCC00\",\r\n  \"#66E64D\",\r\n  \"#4D80CC\",\r\n  \"#9900B3\",\r\n  \"#E64D66\",\r\n  \"#4DB380\",\r\n  \"#FF4D4D\",\r\n  \"#99E6E6\",\r\n  \"#6666FF\",\r\n];\r\n\r\nexport default colorsArray;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\nimport colorsArray from \"./colorsArray\";\n\n// font awesome links and icon\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n\nlet quotesAPI =\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nfunction App() {\n  const [quote, setQuote] = useState(\"never give up !\");\n  const [author, setAuthor] = useState(\"shubbhu\");\n  const [randomNumber, setRandomNumber] = useState(0);\n  const [quotesArray, setQuotesArray] = useState(null);\n\n  const [colors, setColors] = useState(\"#282c34\");\n\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArray(parsedJSON.quotes);\n  };\n\n  useEffect(\n    () => {\n      fetchQuotes(quotesAPI);\n    } /*[quotesAPI]*/\n  );\n\n  const generateRandomNumber = () => {\n    let randomInteger = Math.floor(quotesArray.length * Math.random());\n    setRandomNumber(randomInteger);\n    setQuote(quotesArray[randomInteger].quote);\n    setAuthor(quotesArray[randomInteger].author);\n    // for random colors\n    setColors(colorsArray[randomInteger]);\n  };\n\n  // const quotesArray = [\n  //   {\n  //     quote: \"one\",\n  //     author: \"one\",\n  //   },\n  //   {\n  //     quote: \"two\",\n  //     author: \"two\",\n  //   },\n  //   {\n  //     quote: \"three\",\n  //     author: \"three\",\n  //   },\n  //   {\n  //     quote: \"four\",\n  //     author: \"four\",\n  //   },\n  //   {\n  //     quote: \"five\",\n  //     author: \"five\",\n  //   },\n  // ];\n  return (\n    <div className=\"App\">\n      <header\n        className=\"App-header\"\n        style={{ backgroundColor: colors, color: colors }}\n      >\n        <div id=\"quote-box\" style={{ color: colors }}>\n          {/* <h1>random number {randomNumber}</h1> */}\n          <h1 id=\"text\">\"{quote}\"</h1>\n          <p id=\"author\">- {author}</p>\n\n          <div className=\"button\">\n            <a\n              style={{ backgroundColor: colors }}\n              id=\"tweet-quote\"\n              href={`http://www.twitter.com/intent/tweet?text=${quote} -${author}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              {/* tweet */}\n              <FontAwesomeIcon icon={faTwitter} />\n            </a>\n\n            <button\n              style={{ backgroundColor: colors }}\n              id=\"new-quote\"\n              onClick={generateRandomNumber}\n            >\n              Next Quotes\n            </button>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}